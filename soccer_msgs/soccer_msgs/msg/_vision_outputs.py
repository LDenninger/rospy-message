# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from soccer_msgs/vision_outputs.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg
import soccer_msgs.msg
import std_msgs.msg

class vision_outputs(genpy.Message):
  _md5sum = "88f04b5642e27908804d9a46eea54b66"
  _type = "soccer_msgs/vision_outputs"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
goal_output[] goals
ball_output ball
obstacle_output[] obstacles
localization_output location
path_output[] path_history
float32 probability
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: soccer_msgs/goal_output
geometry_msgs/Point position
float32 probability
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: soccer_msgs/ball_output
geometry_msgs/Point position
float32 probability
bool detected
================================================================================
MSG: soccer_msgs/obstacle_output
geometry_msgs/Point position
float32 width
uint64 id
float32 probability
================================================================================
MSG: soccer_msgs/localization_output
geometry_msgs/Point position
bool dilemmaActive
uint8 DILEMMA_UNKNOWN=0
uint8 DILEMMA_BENCHSIDE=1
uint8 DILEMMA_FARSIDE=2
uint8 DILEMMA_CENTER=3
uint8 DILEMMA_GOAL=4
uint8 lastDilemmaState
time lastResolvedDilemma
float32 probability
================================================================================
MSG: soccer_msgs/path_output
time tag
geometry_msgs/Point position"""
  __slots__ = ['header','goals','ball','obstacles','location','path_history','probability']
  _slot_types = ['std_msgs/Header','soccer_msgs/goal_output[]','soccer_msgs/ball_output','soccer_msgs/obstacle_output[]','soccer_msgs/localization_output','soccer_msgs/path_output[]','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,goals,ball,obstacles,location,path_history,probability

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(vision_outputs, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.goals is None:
        self.goals = []
      if self.ball is None:
        self.ball = soccer_msgs.msg.ball_output()
      if self.obstacles is None:
        self.obstacles = []
      if self.location is None:
        self.location = soccer_msgs.msg.localization_output()
      if self.path_history is None:
        self.path_history = []
      if self.probability is None:
        self.probability = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.goals = []
      self.ball = soccer_msgs.msg.ball_output()
      self.obstacles = []
      self.location = soccer_msgs.msg.localization_output()
      self.path_history = []
      self.probability = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.goals)
      buff.write(_struct_I.pack(length))
      for val1 in self.goals:
        _v1 = val1.position
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.probability
        buff.write(_get_struct_f().pack(_x))
      _x = self
      buff.write(_get_struct_3dfB().pack(_x.ball.position.x, _x.ball.position.y, _x.ball.position.z, _x.ball.probability, _x.ball.detected))
      length = len(self.obstacles)
      buff.write(_struct_I.pack(length))
      for val1 in self.obstacles:
        _v2 = val1.position
        _x = _v2
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_fQf().pack(_x.width, _x.id, _x.probability))
      _x = self
      buff.write(_get_struct_3d2B2If().pack(_x.location.position.x, _x.location.position.y, _x.location.position.z, _x.location.dilemmaActive, _x.location.lastDilemmaState, _x.location.lastResolvedDilemma.secs, _x.location.lastResolvedDilemma.nsecs, _x.location.probability))
      length = len(self.path_history)
      buff.write(_struct_I.pack(length))
      for val1 in self.path_history:
        _v3 = val1.tag
        _x = _v3
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _v4 = val1.position
        _x = _v4
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self.probability
      buff.write(_get_struct_f().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.goals is None:
        self.goals = None
      if self.ball is None:
        self.ball = soccer_msgs.msg.ball_output()
      if self.obstacles is None:
        self.obstacles = None
      if self.location is None:
        self.location = soccer_msgs.msg.localization_output()
      if self.path_history is None:
        self.path_history = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goals = []
      for i in range(0, length):
        val1 = soccer_msgs.msg.goal_output()
        _v5 = val1.position
        _x = _v5
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (val1.probability,) = _get_struct_f().unpack(str[start:end])
        self.goals.append(val1)
      _x = self
      start = end
      end += 29
      (_x.ball.position.x, _x.ball.position.y, _x.ball.position.z, _x.ball.probability, _x.ball.detected,) = _get_struct_3dfB().unpack(str[start:end])
      self.ball.detected = bool(self.ball.detected)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obstacles = []
      for i in range(0, length):
        val1 = soccer_msgs.msg.obstacle_output()
        _v6 = val1.position
        _x = _v6
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 16
        (_x.width, _x.id, _x.probability,) = _get_struct_fQf().unpack(str[start:end])
        self.obstacles.append(val1)
      _x = self
      start = end
      end += 38
      (_x.location.position.x, _x.location.position.y, _x.location.position.z, _x.location.dilemmaActive, _x.location.lastDilemmaState, _x.location.lastResolvedDilemma.secs, _x.location.lastResolvedDilemma.nsecs, _x.location.probability,) = _get_struct_3d2B2If().unpack(str[start:end])
      self.location.dilemmaActive = bool(self.location.dilemmaActive)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path_history = []
      for i in range(0, length):
        val1 = soccer_msgs.msg.path_output()
        _v7 = val1.tag
        _x = _v7
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        _v8 = val1.position
        _x = _v8
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.path_history.append(val1)
      start = end
      end += 4
      (self.probability,) = _get_struct_f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.goals)
      buff.write(_struct_I.pack(length))
      for val1 in self.goals:
        _v9 = val1.position
        _x = _v9
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.probability
        buff.write(_get_struct_f().pack(_x))
      _x = self
      buff.write(_get_struct_3dfB().pack(_x.ball.position.x, _x.ball.position.y, _x.ball.position.z, _x.ball.probability, _x.ball.detected))
      length = len(self.obstacles)
      buff.write(_struct_I.pack(length))
      for val1 in self.obstacles:
        _v10 = val1.position
        _x = _v10
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_fQf().pack(_x.width, _x.id, _x.probability))
      _x = self
      buff.write(_get_struct_3d2B2If().pack(_x.location.position.x, _x.location.position.y, _x.location.position.z, _x.location.dilemmaActive, _x.location.lastDilemmaState, _x.location.lastResolvedDilemma.secs, _x.location.lastResolvedDilemma.nsecs, _x.location.probability))
      length = len(self.path_history)
      buff.write(_struct_I.pack(length))
      for val1 in self.path_history:
        _v11 = val1.tag
        _x = _v11
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _v12 = val1.position
        _x = _v12
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self.probability
      buff.write(_get_struct_f().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.goals is None:
        self.goals = None
      if self.ball is None:
        self.ball = soccer_msgs.msg.ball_output()
      if self.obstacles is None:
        self.obstacles = None
      if self.location is None:
        self.location = soccer_msgs.msg.localization_output()
      if self.path_history is None:
        self.path_history = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goals = []
      for i in range(0, length):
        val1 = soccer_msgs.msg.goal_output()
        _v13 = val1.position
        _x = _v13
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (val1.probability,) = _get_struct_f().unpack(str[start:end])
        self.goals.append(val1)
      _x = self
      start = end
      end += 29
      (_x.ball.position.x, _x.ball.position.y, _x.ball.position.z, _x.ball.probability, _x.ball.detected,) = _get_struct_3dfB().unpack(str[start:end])
      self.ball.detected = bool(self.ball.detected)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.obstacles = []
      for i in range(0, length):
        val1 = soccer_msgs.msg.obstacle_output()
        _v14 = val1.position
        _x = _v14
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 16
        (_x.width, _x.id, _x.probability,) = _get_struct_fQf().unpack(str[start:end])
        self.obstacles.append(val1)
      _x = self
      start = end
      end += 38
      (_x.location.position.x, _x.location.position.y, _x.location.position.z, _x.location.dilemmaActive, _x.location.lastDilemmaState, _x.location.lastResolvedDilemma.secs, _x.location.lastResolvedDilemma.nsecs, _x.location.probability,) = _get_struct_3d2B2If().unpack(str[start:end])
      self.location.dilemmaActive = bool(self.location.dilemmaActive)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path_history = []
      for i in range(0, length):
        val1 = soccer_msgs.msg.path_output()
        _v15 = val1.tag
        _x = _v15
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        _v16 = val1.position
        _x = _v16
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.path_history.append(val1)
      start = end
      end += 4
      (self.probability,) = _get_struct_f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3d2B2If = None
def _get_struct_3d2B2If():
    global _struct_3d2B2If
    if _struct_3d2B2If is None:
        _struct_3d2B2If = struct.Struct("<3d2B2If")
    return _struct_3d2B2If
_struct_3dfB = None
def _get_struct_3dfB():
    global _struct_3dfB
    if _struct_3dfB is None:
        _struct_3dfB = struct.Struct("<3dfB")
    return _struct_3dfB
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_fQf = None
def _get_struct_fQf():
    global _struct_fQf
    if _struct_fQf is None:
        _struct_fQf = struct.Struct("<fQf")
    return _struct_fQf
